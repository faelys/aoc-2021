/*
 * Copyright (c) 2021, Natacha Port√©
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Yet another state machine, implemented almost directly from the
 * puzzle description. Each time step some processing is done, with a simple
 * priority list: if exploding is possible, it's done on the leftmost
 * possible index; otherwise if splitting is possible, it's done on the
 * leftmost index; if neither exploding nor splitting is possible, another
 * input line is appended; if neither exploding nor splitting nor appending
 * is possible, magnitude calculation is starts, and when all that is over,
 * the answer is ready.
 *
 * This HLL file can be used directly in the why tool, selecting a number
 * of processing steps using `$depth`, which is 2183 for that (small) example,
 * then checking that no issue was encountered (i.e. that `error` is false),
 * that the depth is large enough (i.e. that `finished` is true), and the
 * answer can be read from the variable `answer_1`.
 *
 * The answer can also be found non-interactively, by providing a depth
 * through an otherwise empty counter-example, e.g.:
 *   <models>
 *   <model name="CEX for PO 2" type="cex" po="2" depth="500" length="501" lookahead="0">
 *   </model>
 *   </models>
 * for 500 processing steps, using the following commands:
 *   expand1 -hll day18.hll -lll day18.lll -dumpMap day18.map
 *   cex_simulator -hll day18.hll -map day18.map -cex empty-500.cex \
 *     -res day18.res -O
 * The output will have the same XML format, with a line of `f` or `t` for
 * error and a line of space-sperated numbers. For example,
 *   sed -n '/^[tf].*t/p;/^[0-9]/s/^.* //p' day18.res
 * will output the error line if an error happened, and other wise the last
 * value for answer_1, which 0 if the depth was not large enough, and the
 * correct value otherwise.
 *
 * That only solves the first puzzle; the second puzzle is merely doing the
 * same thing over all possible pairs of input lines, which is done using
 * an external script and the non-interactive use (see day18-2.sh).
 */
Constants:
  int start_pair := -1;
  int end_pair := -2;
  int end_line := -3;
  int input_size := 275;
  int state_size := 100;

Declarations:
  int input[input_size];
  int[0, input_size] input_ptr;
  int[end_line, 10000] state[state_size];
  int depth[state_size];
  int reduced[state_size];
  int reduced_rank[state_size];
  bool error;

Definitions:
  first_line_size := $min i:[0, input_size-1]
                       (if input[i] = end_line then i else input_size);
  I(state[i]) := if i < first_line_size then input[i] else end_line;
  I(input_ptr) := first_line_size + 1;

  cur_state_size := 1 + $max i:[0, state_size-1]
                          (if state[i] >= end_pair then i else -1);


  depth[i] := (if i = 0 then 0 else depth[i-1])
            + (if state[i] = start_pair then 1
               elif state[i] = end_pair then -1
               else 0);

  explode_index := if adding
                   then $min i:[0, state_size-4]
                          (if state[i] = start_pair
                            & state[i+1] >= 0
                            & state[i+2] >= 0
                            & state[i+3] = end_pair
                            & depth[i] >= 5
                           then i else state_size)
                   else state_size;

  exploding := explode_index < state_size;

  explode_target_low := if exploding
                        then $max i:[0, state_size-3]
                                (if state[i] >= 0 & i < explode_index
                                 then i else -1)
                        else -1;

  explode_target_high := if exploding
                         then $min i:[0, state_size-1]
                                 (if state[i] >= 0 & i > explode_index + 3
                                  then i else state_size)
                         else state_size;

  split_index := if adding & ~exploding
                 then $min i:[0, state_size-1]
                        (if state[i] >= 10 then i else state_size)
                 else state_size;

  splitting := split_index < state_size;

  next_input_ptr := if ~exploding & ~splitting & input_ptr < input_size
                    then $min i:[0, input_size-1]
                           (if i > input_ptr & input[i] = end_line
                            then i + 1 else input_size)
                    else input_ptr;
  X(input_ptr) := next_input_ptr;

  adding := true, adding & (exploding # splitting # input_ptr < input_size);

  reducing := ~adding & state[0] = start_pair;
  reduced[i] := if ~reducing then state[i]
                elif (i < state_size - 3
                      & state[i] = start_pair
                      & state[i+1] >= 0
                      & state[i+2] >= 0
                      & state[i+3] = end_pair)
                then 3*state[i+1] + 2*state[i+2]
                elif (i < state_size - 2 & i >= 1
                      & state[i-1] = start_pair
                      & state[i] >= 0
                      & state[i+1] >= 0
                      & state[i+2] = end_pair)
                   # (i < state_size - 1 & i >= 2
                      & state[i-2] = start_pair
                      & state[i-1] >= 0
                      & state[i] >= 0
                      & state[i+1] = end_pair)
                   # (i >= 3
                      & state[i-3] = start_pair
                      & state[i-2] >= 0
                      & state[i-1] >= 0
                      & state[i] = end_pair)
                then end_line
                else state[i];

  reduced_rank[i] := if ~reducing then i
                     elif reduced[i] = end_line then -1
                     else SUM j:[0, state_size-1]
                            (if j < i & reduced[j] != end_line then 1 else 0);
  last_reduced_rank := $max i:[0, state_size-1] (reduced_rank[i]);

  X(state[i]) := if exploding
                 then (if i = explode_target_low
                       then state[i] + state[explode_index + 1]
                       elif i < explode_index then state[i]
                       elif i = explode_index then 0
                       elif i + 3 >= state_size then end_line
                       elif i + 3 = explode_target_high
                       then state[i+3] + state[explode_index + 2]
                       else state[i+3])
                 elif splitting
                 then (if i < split_index then state[i]
                       elif i = split_index then start_pair
                       elif i = split_index + 1 then state[i-1] / 2
                       elif i = split_index + 2 then state[i-2] /< 2
                       elif i = split_index + 3 then end_pair
                       else state[i-3])
                 elif next_input_ptr > input_ptr
                 then (if i = 0 then start_pair
                       elif i - 1 < cur_state_size then state[i-1]
                       elif input_ptr + i - 1 - cur_state_size < next_input_ptr - 1
                       then input[input_ptr + i - 1 - cur_state_size]
                       elif input_ptr + i - 1 - cur_state_size = next_input_ptr - 1
                       then end_pair
                       else end_line)
                 elif reducing
                 then (if i <= last_reduced_rank
                       then reduced[SELECT j:[0, state_size-1] (reduced_rank[j] = i)]
                       else end_line)
                 else state[i];


  finished := ~adding & ~reducing;  /* at depth 18400 */

  error := pre(error, false)
         # (SOME i:[0, state_size-1] (depth[i] < 0))
         # (SOME i:[0, state_size-1]
              (i < cur_state_size & state[i] = end_line))
         # (SOME i:[0, state_size-1]
              (i >= cur_state_size & state[i] != end_line))
         # (splitting & (state[state_size-3] != end_line
                       # state[state_size-2] != end_line
                       # state[state_size-1] != end_line))
         # (next_input_ptr > input_ptr
             & cur_state_size + 2 + next_input_ptr - input_ptr > state_size);

  answer_1 := if finished then state[0] else 0;

Outputs:
  error;
  answer_1;

Proof Obligations:
  ~error;
  ~finished;

Definitions:
  input := {
    /* generated by filtering AoC input to `sed -f day18-input.sed` */
    start_pair, start_pair, start_pair, 0, start_pair, 5, 8, end_pair, end_pair, start_pair, start_pair, 1, 7, end_pair, start_pair, 9, 6, end_pair, end_pair, end_pair, start_pair, start_pair, 4, start_pair, 1, 2, end_pair, end_pair, start_pair, start_pair, 1, 4, end_pair, 2, end_pair, end_pair, end_pair, end_line,
    start_pair, start_pair, start_pair, 5, start_pair, 2, 8, end_pair, end_pair, 4, end_pair, start_pair, 5, start_pair, start_pair, 9, 9, end_pair, 0, end_pair, end_pair, end_pair, end_line,
    start_pair, 6, start_pair, start_pair, start_pair, 6, 2, end_pair, start_pair, 5, 6, end_pair, end_pair, start_pair, start_pair, 7, 6, end_pair, start_pair, 4, 7, end_pair, end_pair, end_pair, end_pair, end_line,
    start_pair, start_pair, start_pair, 6, start_pair, 0, 7, end_pair, end_pair, start_pair, 0, 9, end_pair, end_pair, start_pair, 4, start_pair, 9, start_pair, 9, 0, end_pair, end_pair, end_pair, end_pair, end_line,
    start_pair, start_pair, start_pair, 7, start_pair, 6, 4, end_pair, end_pair, start_pair, 3, start_pair, 1, 3, end_pair, end_pair, end_pair, start_pair, start_pair, start_pair, 5, 5, end_pair, 1, end_pair, 9, end_pair, end_pair, end_line,
    start_pair, start_pair, 6, start_pair, start_pair, 7, 3, end_pair, start_pair, 3, 2, end_pair, end_pair, end_pair, start_pair, start_pair, start_pair, 3, 8, end_pair, start_pair, 5, 7, end_pair, end_pair, 4, end_pair, end_pair, end_line,
    start_pair, start_pair, start_pair, start_pair, 5, 4, end_pair, start_pair, 7, 7, end_pair, end_pair, 8, end_pair, start_pair, start_pair, 8, 3, end_pair, 8, end_pair, end_pair, end_line,
    start_pair, start_pair, 9, 3, end_pair, start_pair, start_pair, 9, 9, end_pair, start_pair, 6, start_pair, 4, 9, end_pair, end_pair, end_pair, end_pair, end_line,
    start_pair, start_pair, 2, start_pair, start_pair, 7, 7, end_pair, 7, end_pair, end_pair, start_pair, start_pair, 5, 8, end_pair, start_pair, start_pair, 9, 3, end_pair, start_pair, 0, 2, end_pair, end_pair, end_pair, end_pair, end_line,
    start_pair, start_pair, start_pair, start_pair, 5, 2, end_pair, 5, end_pair, start_pair, 8, start_pair, 3, 7, end_pair, end_pair, end_pair, start_pair, start_pair, 5, start_pair, 7, 5, end_pair, end_pair, start_pair, 4, 4, end_pair, end_pair, end_pair, end_line
  };
