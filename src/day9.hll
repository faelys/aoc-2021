/*
 * Copyright (c) 2021, Natacha Porté
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * The puzzles today are straightforward, with a first puzzle which is
 * completely static, and the second puzzle in which values are propagated
 * over time.
 *
 * In the second puzzle I encountered again some performance issues, despite
 * a seemingly low size (10000 8-bit latches) and no full expansion. On
 * the user-specific inputs, the expansion takes almost 5 minutes, and s3
 * swaps on the second time frame, in less than 4 minutes. I had to use
 * the `why` tool (`why -hll day9.hll`) and exploring depths manually. On
 * my data the answer was found at depth 7, after 9 CPU-minutes.
 *
 * It turns out that the performance issue came from answer_2, removing it
 * from the outputs lowers the expansion time to 6s, and s3 can find the
 * correct depth in 63 seconds. But then displaying the answer requires
 * the why tool or the cex_simulator tool to expand answer_2 and spend
 * 5 minutes on it.
 */

Constants:
  /* Puzzle size for reference values */
  int W := 10;
  int H := 5;
  int N := 4;

  /* Puzzle size for user-specific values */
  int W := 100;
  int H := 100;
  int N := 250;
  */

Declarations:
  int height_map[H, W];

  int extended_height(int, int, int);
  bool is_local_min(int, int);
  int risk_level(int, int);
  int answer_1;

  int min_map[W, H];
  int[0,N] prev_basin_map[W, H];
  int extended_prev_basin_map(int, int);
  int basin_map[W, H];
  int basin_size[N+1];
  int top_basin_size_1;
  int top_basin_size_2;
  int top_basin_size_3;
  int answer_2;

Definitions:
  /* Puzzle input */
  height_map := {
    /*
     * The data set below was imported by filtering AoC input through
     * sed 's/[0-9]/&, /g;s/^/    { /;s/, $/ },/;$s/,$//'
     */
    { 2, 1, 9, 9, 9, 4, 3, 2, 1, 0 },
    { 3, 9, 8, 7, 8, 9, 4, 9, 2, 1 },
    { 9, 8, 5, 6, 7, 8, 9, 8, 9, 2 },
    { 8, 7, 6, 7, 8, 9, 6, 7, 8, 9 },
    { 9, 8, 9, 9, 9, 6, 5, 6, 7, 8 }
  };

  /* First Puzzle */

  extended_height(x, y, d) := if x:[0, W-1] & y:[0, H-1]
                              then height_map[y, x] else d;

  is_local_min(x, y) := height_map[y, x] < extended_height(x-1, y, 10)
                      & height_map[y, x] < extended_height(x+1, y, 10)
                      & height_map[y, x] < extended_height(x, y-1, 10)
                      & height_map[y, x] < extended_height(x, y+1, 10);

  risk_level(x, y) := if is_local_min(x, y) then height_map[y, x] + 1 else 0;

  answer_1 := SUM x:[0, W-1], y:[0, H-1] (risk_level(x, y));

  /* Second Puzzle */

  min_map[x, y]
    := if is_local_min(x, y)
       then (if y > 0
             then SUM xx:[0,W-1], yy:[0,y-1]
                    (if min_map[xx, yy] > 0 then 1 else 0)
             else 0)
          + SUM xx:[0, W-1] (if xx < x & min_map[xx, y] > 0 then 1 else 0)
          + 1
       else 0;

  prev_basin_map[x, y] := min_map[x, y], basin_map[x, y];
  extended_prev_basin_map(x, y) := if x:[0, W-1] & y:[0, H-1]
                                   then prev_basin_map[x, y] else 0;

  basin_map[x, y] := if prev_basin_map[x, y] > 0
                     then prev_basin_map[x, y]
                     else if height_map[y, x] < 9
                          then $max($max(extended_prev_basin_map(x-1, y),
                                         extended_prev_basin_map(x+1, y)),
                                    $max(extended_prev_basin_map(x, y-1),
                                         extended_prev_basin_map(x, y+1)))
                          else 0;

  basin_size[i] := SUM x:[0, W-1], y:[0, H-1]
                   (if basin_map[x, y] = i then 1 else 0);

  top_basin_size_1 := $max i:[1,N] (basin_size[i]);
  top_basin_size_2 := if (SUM i:[1,N] (if basin_size[i] = top_basin_size_1
                                       then 1 else 0)
                          >= 2)
                      then top_basin_size_1
                      else $max i:[1,N] (if basin_size[i] < top_basin_size_1
                                         then basin_size[i]
                                         else 0);
  top_basin_size_3 := if (SUM i:[1,N] (if basin_size[i] >= top_basin_size_2
                                       then 1 else 0)
                          >= 3)
                      then top_basin_size_2
                      else $max i:[1,N] (if basin_size[i] < top_basin_size_2
                                         then basin_size[i]
                                         else 0);
  answer_2 := top_basin_size_1 * top_basin_size_2 * top_basin_size_3;


Outputs:
  answer_1;

Proof Obligations:
  /* Check that N is not too small */
  SUM x:[0, W-1], y:[0, H-1] (if is_local_min(x, y) then 1 else 0) <= N;

  /* Falsified when basin_map is fully computed */
  SOME x:[0, W-1], y:[0, H-1] (height_map[y, x] < 9 & basin_map[x, y] = 0);
