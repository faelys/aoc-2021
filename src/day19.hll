/*
 * Copyright (c) 2021, Natacha PortÃ©
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This is another pair of puzzles where a solver could be really useful,
 * but getting it to work is long and tedious. I'm sure so much arithmetic
 * is a good fit for a SAT solver either.
 *
 * I first tried to solve all scanner positions at once, but that was a SAT
 * problem so huge it almost immediately started swapping, so that was not
 * an option. So I went for an incremental resolution, finding one new
 * position on every time step.
 * As the HLL file currently stands, with a computer big enough that should
 * work, and a counter-exmaple to PO 1 should provide all the answers.
 *
 * However the BMC which finds the counter-example PO 1 is actually a SAT
 * problem very similar to solving all position at once, since previous
 * time solutions don't lock the earlier times.
 *
 * Then I realized that this is a puzzle and not a real-life problem, so it
 * s probably not ambiguous and maybe even without any false lead, so
 * I assumed a greedy algorithm would work, finding one new position on
 * every time step until all are known.
 * The PO 2 is false, but a valid counter-example still has to meet constraints
 * (so false can be proved if the constraints unsatisfiable). That way this
 * HLL can be repeatedly run for one step, which finds a new position, and
 * the position can be added to the initial values, so the HLL can be run
 * again for one step, and so on until all positions are found.
 *
 * This loop was run through the following commands:
 * expand1 -hll day19.hll -lll day19.lll -dumpMap day19.map
 * s3 -lll day19.lll -cex day19.cex -analyse all join in 1 group -bmc stop 0
 * cex_simulator -hll day19.hll -cex day19.cex -map day19.map -res day19.res -I
 * When only one position is left unknown, the same can be run with
 * the argument `-IO` instead of `-I` to `cex_simulator` to output the
 * puzzle solutions.
 */

Constants:
  int max_pos := 16383;
Types:
  enum { facing_x_pos, facing_x_neg,
         facing_y_pos, facing_y_neg,
         facing_z_pos, facing_z_neg } orientation;
  enum { up_u_pos, up_u_neg,
         up_v_pos, up_v_neg } rotation;
  int[-max_pos, max_pos] coord;
  struct { x:coord, y:coord, z:coord, o:orientation, r:rotation } scanner_data;
  struct { x:coord, y:coord, z:coord } point;

Inputs:
  int[0, nof_scanners-1] new_index;
  scanner_data new_data;

Constraints:
  finished # ~solved[new_index];

Declarations:
  point input[nof_scanners][max_scanned_probes];
  int translated_x(orientation, rotation, int, int, int);
  int translated_y(orientation, rotation, int, int, int);
  int translated_z(orientation, rotation, int, int, int);
  point beacon[nof_scanners][max_scanned_probes];
  int overlap_count[nof_scanners, nof_scanners];
  scanner_data init_scanner[nof_scanners];
  scanner_data scanner[nof_scanners];
  bool known[nof_scanners];
  bool solved[nof_scanners];
  bool set[nof_scanners];

Definitions:
  /*
   * Rotations preserve discriminant sign, so the available transformations are:
   * (x,y,z) (x,-z,y) (x,z,-y) (x,-y,-z) (-x,z,y) (-x,y,-z) (-x,-y,z) (-x,-z,-y)
   * (y,z,x) (-z,y,x) (z,-y,x) (-y,-z,x) (z,y,-x) (y,-z,-x) (-y,z,-x) (-z,-y,-x)
   * (z,x,y) (y,x,-z) (-y,x,z) (-z,x,-y) (y,-x,z) (-z,-x,y) (z,-x,-y) (-y,-x,-z)
   *
   * Face is subjective z+, up is subjective y+
   *
   * facing z+ or z-: u is x, v is y
   *   facing z+, up u+: real(x,y,z) := scanned(y,-x,z)
   *   facing z+, up u-: real(x,y,z) := scanned(-y,x,z)
   *   facing z+, up v+: real(x,y,z) := scanned(x,y,z)
   *   facing z+, up v-: real(x,y,z) := scanned(-x,-y,z)
   *   facing z-, up u+: real(x,y,z) := scanned(y,x,-z)
   *   facing z-, up u-: real(x,y,z) := scanned(-y,-x,-z)
   *   facing z-, up v+: real(x,y,z) := scanned(x,-y,-z)
   *   facing z-, up v-: real(x,y,z) := scanned(-x,y,-z)
   * facing y+ or y-: u is z, v is x
   *   facing y+, up u+: real(x,y,z) := scanned(-x,z,y)
   *   facing y+, up u-: real(x,y,z) := scanned(x,z,-y)
   *   facing y+, up v+: real(x,y,z) := scanned(y,z,x)
   *   facing y+, up v-: real(x,y,z) := scanned(-y,z,-x)
   *   facing y-, up u+: real(x,y,z) := scanned(x,-z,y)
   *   facing y-, up u-: real(x,y,z) := scanned(-x,-z,-y)
   *   facing y-, up v+: real(x,y,z) := scanned(y,-z,-x)
   *   facing y-, up v-: real(x,y,z) := scanned(-y,-z,x)
   * facing x+ or x-: u is y, v is z
   *   facing x+, up u+: real(x,y,z) := scanned(z,y,-x)
   *   facing x+, up u-: real(x,y,z) := scanned(z,-y,x)
   *   facing x+, up v+: real(x,y,z) := scanned(z,x,y)
   *   facing x+, up v-: real(x,y,z) := scanned(z,-x,-y)
   *   facing x-, up u+: real(x,y,z) := scanned(-z,y,x)
   *   facing x-, up u-: real(x,y,z) := scanned(-z,-y,-x)
   *   facing x-, up v+: real(x,y,z) := scanned(-z,-x,y)
   *   facing x-, up v-: real(x,y,z) := scanned(-z,x,-y)
   */
  translated_x(o, r, x, y, z)
    := (o, r
       |facing_z_pos, up_u_pos => y
       |facing_z_pos, up_u_neg => -y
       |facing_z_pos, up_v_pos => x
       |facing_z_pos, up_v_neg => -x
       |facing_z_neg, up_u_pos => y
       |facing_z_neg, up_u_neg => -y
       |facing_z_neg, up_v_pos => x
       |facing_z_neg, up_v_neg => -x
       |facing_y_pos, up_u_pos => -x
       |facing_y_pos, up_u_neg => x
       |facing_y_pos, up_v_pos => y
       |facing_y_pos, up_v_neg => -y
       |facing_y_neg, up_u_pos => x
       |facing_y_neg, up_u_neg => -x
       |facing_y_neg, up_v_pos => y
       |facing_y_neg, up_v_neg => -y
       |facing_x_pos, _ => z
       |facing_x_neg, _ => -z);
  translated_y(o, r, x, y, z)
    := (o, r
       |facing_z_pos, up_u_pos => -x
       |facing_z_pos, up_u_neg => x
       |facing_z_pos, up_v_pos => y
       |facing_z_pos, up_v_neg => -y
       |facing_z_neg, up_u_pos => x
       |facing_z_neg, up_u_neg => -x
       |facing_z_neg, up_v_pos => -y
       |facing_z_neg, up_v_neg => y
       |facing_y_pos, _ => z
       |facing_y_neg, _ => -z
       |facing_x_pos, up_u_pos => y
       |facing_x_pos, up_u_neg => -y
       |facing_x_pos, up_v_pos => x
       |facing_x_pos, up_v_neg => -x
       |facing_x_neg, up_u_pos => y
       |facing_x_neg, up_u_neg => -y
       |facing_x_neg, up_v_pos => -x
       |facing_x_neg, up_v_neg => x);
  translated_z(o, r, x, y, z)
    := (o, r
       |facing_z_pos, _ => z
       |facing_z_neg, _ => -z
       |facing_y_pos, up_u_pos => y
       |facing_y_pos, up_u_neg => -y
       |facing_y_pos, up_v_pos => x
       |facing_y_pos, up_v_neg => -x
       |facing_y_neg, up_u_pos => y
       |facing_y_neg, up_u_neg => -y
       |facing_y_neg, up_v_pos => -x
       |facing_y_neg, up_v_neg => x
       |facing_x_pos, up_u_pos => -x
       |facing_x_pos, up_u_neg => x
       |facing_x_pos, up_v_pos => y
       |facing_x_pos, up_v_neg => -y
       |facing_x_neg, up_u_pos => x
       |facing_x_neg, up_u_neg => -x
       |facing_x_neg, up_v_pos => y
       |facing_x_neg, up_v_neg => -y);

  solved[i] := known[i], set[i];
  set[i] := solved[i] # i = new_index;
  finished := ALL i:[0, nof_scanners-1] (solved[i]);

  init_scanner := {
    {     0,     0,     0, facing_z_pos, up_v_pos }, /*  0 */
    {     0,     0,     0, facing_z_pos, up_v_pos }, /*  1 */
    {     0,     0,     0, facing_z_pos, up_v_pos }, /*  2 */
    {     0,     0,     0, facing_z_pos, up_v_pos }, /*  3 */
    {     0,     0,     0, facing_z_pos, up_v_pos }  /*  4 */
  };

  known := {
    true,  /*  0 */
    false, /*  1 */
    false, /*  2 */
    false, /*  3 */
    false  /*  4 */
  };

  scanner[i] := { if known[i] then init_scanner[i].x
                  elif ~finished & i = new_index then new_data.x
                  else pre<coord>(scanner[i].x, 0),
                  if known[i] then init_scanner[i].y
                  elif ~finished & i = new_index then new_data.y
                  else pre<coord>(scanner[i].y, 0),
                  if known[i] then init_scanner[i].z
                  elif ~finished & i = new_index then new_data.z
                  else pre<coord>(scanner[i].z, 0),
                  if known[i] then init_scanner[i].o
                  elif ~finished & i = new_index then new_data.o
                  else pre(scanner[i].o, facing_z_pos),
                  if known[i] then init_scanner[i].r
                  elif ~finished & i = new_index then new_data.r
                  else pre(scanner[i].r, up_v_pos) };

  beacon[i][j]
    := { if ~set[i] # (input[i][j].x=0 & input[i][j].y=0 & input[i][j].z=0)
         then 0 else translated_x(scanner[i].o,
                                  scanner[i].r,
                                  input[i][j].x,
                                  input[i][j].y,
                                  input[i][j].z)
                       + scanner[i].x,
         if ~set[i] # (input[i][j].x=0 & input[i][j].y=0 & input[i][j].z=0)
         then 0 else translated_y(scanner[i].o,
                                  scanner[i].r,
                                  input[i][j].x,
                                  input[i][j].y,
                                  input[i][j].z)
                       + scanner[i].y,
         if ~set[i] # (input[i][j].x=0 & input[i][j].y=0 & input[i][j].z=0)
         then 0 else translated_z(scanner[i].o,
                                  scanner[i].r,
                                  input[i][j].x,
                                  input[i][j].y,
                                  input[i][j].z)
                       + scanner[i].z };

  overlap_count[i, j] := SUM m:[0, max_scanned_probes-1]
    (if (beacon[i][m].x != 0 # beacon[i][m].y != 0 # beacon[i][m].z != 0)
       & SOME n:[0, max_scanned_probes-1] (beacon[i][m] = beacon[j][n])
     then 1
     else 0);

  beacon_count := SUM i:[0, nof_scanners-1], m:[0, max_scanned_probes-1]
    (if (beacon[i][m].x != 0 # beacon[i][m].y != 0 # beacon[i][m].z != 0)
       & ALL j:[0, nof_scanners-1], n:[0, max_scanned_probes-1]
           (j < i -> beacon[i][m] != beacon[j][n])
     then 1 else 0);

  answer_2 := $max i:[0, nof_scanners-1], j:[0, nof_scanners-1]
                ($abs(scanner[i].x - scanner[j].x)
               + $abs(scanner[i].y - scanner[j].y)
               + $abs(scanner[i].z - scanner[j].z));

Constraints:
  SOME i:[0, nof_scanners-1]
    (solved[i] & overlap_count[i, new_index] >= 12);

Outputs:
  beacon_count; /* answer to the fist puzzle */
  answer_2;

Proof Obligations:
/* Check that the transformation seem correct
  ALL a:[-1,1], b:[-1,1], c:[-1,1],
      d:[-1,1], e:[-1,1], f:[-1,1],
      g:[-1,1], h:[-1,1], i:[-1,1]
    ((a*e*i + b*f*g + c*d*h - c*e*g - b*d*i -a*f*h = 1
     & population_count_eq(a = 0, b = 0, c = 0, 2)
     & population_count_eq(c = 0, d = 0, e = 0, 2)
     & population_count_eq(f = 0, g = 0, h = 0, 2)
     & population_count_eq(a = 0, d = 0, g = 0, 2)
     & population_count_eq(b = 0, e = 0, h = 0, 2)
     & population_count_eq(c = 0, f = 0, i = 0, 2))
     ->
     SOME o:orientation, r:rotation
       (translated_x(o, r, 1, 0, 0) = a
      & translated_x(o, r, 0, 1, 0) = b
      & translated_x(o, r, 0, 0, 1) = c
      & translated_y(o, r, 1, 0, 0) = d
      & translated_y(o, r, 0, 1, 0) = e
      & translated_y(o, r, 0, 0, 1) = f
      & translated_z(o, r, 1, 0, 0) = g
      & translated_z(o, r, 0, 1, 0) = h
      & translated_z(o, r, 0, 0, 1) = i));
*/
  ~finished;
  FALSE;

Constants:
  int nof_scanners := 5;
  int max_scanned_probes := 26;
Definitions:
  /*
   * Generated by filtering AoC input through
   * sed 's/^.*scanner.*$/    },{/;s/^[-0-9].*$/      { & },/'
   * then manually padding with `{ 0,0,0 }` to max_scanner_probes elements
   * and fixing commas.
   */
  input := {
    {
      { 404,-588,-901 },
      { 528,-643,409 },
      { -838,591,734 },
      { 390,-675,-793 },
      { -537,-823,-458 },
      { -485,-357,347 },
      { -345,-311,381 },
      { -661,-816,-575 },
      { -876,649,763 },
      { -618,-824,-621 },
      { 553,345,-567 },
      { 474,580,667 },
      { -447,-329,318 },
      { -584,868,-557 },
      { 544,-627,-890 },
      { 564,392,-477 },
      { 455,729,728 },
      { -892,524,684 },
      { -689,845,-530 },
      { 423,-701,434 },
      { 7,-33,-71 },
      { 630,319,-379 },
      { 443,580,662 },
      { -789,900,-551 },
      { 459,-707,401 },
      { 0, 0, 0 }
    }, {
      { 686,422,578 },
      { 605,423,415 },
      { 515,917,-361 },
      { -336,658,858 },
      { 95,138,22 },
      { -476,619,847 },
      { -340,-569,-846 },
      { 567,-361,727 },
      { -460,603,-452 },
      { 669,-402,600 },
      { 729,430,532 },
      { -500,-761,534 },
      { -322,571,750 },
      { -466,-666,-811 },
      { -429,-592,574 },
      { -355,545,-477 },
      { 703,-491,-529 },
      { -328,-685,520 },
      { 413,935,-424 },
      { -391,539,-444 },
      { 586,-435,557 },
      { -364,-763,-893 },
      { 807,-499,-711 },
      { 755,-354,-619 },
      { 553,889,-390 },
      { 0, 0, 0 }
    }, {
      { 649,640,665 },
      { 682,-795,504 },
      { -784,533,-524 },
      { -644,584,-595 },
      { -588,-843,648 },
      { -30,6,44 },
      { -674,560,763 },
      { 500,723,-460 },
      { 609,671,-379 },
      { -555,-800,653 },
      { -675,-892,-343 },
      { 697,-426,-610 },
      { 578,704,681 },
      { 493,664,-388 },
      { -671,-858,530 },
      { -667,343,800 },
      { 571,-461,-707 },
      { -138,-166,112 },
      { -889,563,-600 },
      { 646,-828,498 },
      { 640,759,510 },
      { -630,509,768 },
      { -681,-892,-333 },
      { 673,-379,-804 },
      { -742,-814,-386 },
      { 577,-820,562 }
    }, {
      { -589,542,597 },
      { 605,-692,669 },
      { -500,565,-823 },
      { -660,373,557 },
      { -458,-679,-417 },
      { -488,449,543 },
      { -626,468,-788 },
      { 338,-750,-386 },
      { 528,-832,-391 },
      { 562,-778,733 },
      { -938,-730,414 },
      { 543,643,-506 },
      { -524,371,-870 },
      { 407,773,750 },
      { -104,29,83 },
      { 378,-903,-323 },
      { -778,-728,485 },
      { 426,699,580 },
      { -438,-605,-362 },
      { -469,-447,-387 },
      { 509,732,623 },
      { 647,635,-688 },
      { -868,-804,481 },
      { 614,-800,639 },
      { 595,780,-596 },
      { 0, 0, 0 }
    }, {
      { 727,592,562 },
      { -293,-554,779 },
      { 441,611,-461 },
      { -714,465,-776 },
      { -743,427,-804 },
      { -660,-479,-426 },
      { 832,-632,460 },
      { 927,-485,-438 },
      { 408,393,-506 },
      { 466,436,-512 },
      { 110,16,151 },
      { -258,-428,682 },
      { -393,719,612 },
      { -211,-452,876 },
      { 808,-476,-593 },
      { -575,615,604 },
      { -485,667,467 },
      { -680,325,-822 },
      { -627,-443,-432 },
      { 872,-547,-609 },
      { 833,512,582 },
      { 807,604,487 },
      { 839,-516,451 },
      { 891,-625,532 },
      { -652,-548,-490 },
      { 30,-46,-14 }
    }
  };
