/*
 * Copyright (c) 2021, Natacha Porté
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * The puzzles today involve octopus-shaped automatons which are straightfoward
 * to convert into code. The lack of imperative loops in HLL require setting
 * up two levels of time, so that one iteration is done at every HLL time step,
 * and end-of-loop conditions turn into "game time" increment.
 *
 * The disconnect between HLL time steps and game steps prevents us from
 * knowing beforehand at which point in the stream the variables show the
 * puzzle answers. So as usual, proof obligations are provided so that their
 * falsification yields a counter-example which stops at the relevant time.
 *
 * In theory the answer could be determined directly with the following:
 *   expand1 -hll day11.hll -lll day11.lll -dumpMap day11.map
 *   s3 -lll day11.lll -cex day11a.cex -analyse 1 2 join in 1 group -bmc
 *   s3 -lll day11.lll -cex day11b.cex -analyse 1 3 join in 1 group -bmc
 * and then using the why tool or the cex_simulator tool to examine the
 * relevant output.
 * However BMC is not a good strategy because it duplicates the problem graph
 * for each time step, making it quite big and slow after a few hundreds of
 * time steps, while the answers requires thousands. (I tried it anyway,
 * and the 672 steps of the first puzzle took 50 minutes and the 1192 steps
 * of the second puzzle took 156 minutes).
 * In contrast, the why tool considers only one step at a time, updating the
 * inputs and memories as needed, so it can quickly compute thousands of
 * time steps.
 *
 * So I solve these puzzles using only the why tool (i.e. `why -hll day11.hll`)
 * using `$noexplain` to make the output less spammy, then trying various
 * `$depth` value and checking `$po 1` or `$po 2` until I reach the earliest
 * falsification (i.e. `[f]` with only `t` before it). Then I restart the why
 * tool and go directly to the relevant depth, so that the answers are at the
 * last position in their respective streams.
 */
Declarations:
  int input_grid[10, 10];

  bool flashing;
  int[0, 1000] prev_game_step;
  int game_step;
  int[0, 20] energy[10, 10];
  bool flashed[10, 10];
  int flash_contribution(int, int);
  int[0, 10^6] prev_flash_count;

Definitions:
  input_grid := {
    /*
     * The data set below was imported by filtering AoC input through
     * sed 's/[0-9]/&, /g;s/^/    { /;s/, $/ },/;$s/,$//'
     */
    { 5, 4, 8, 3, 1, 4, 3, 2, 2, 3 },
    { 2, 7, 4, 5, 8, 5, 4, 7, 1, 1 },
    { 5, 2, 6, 4, 5, 5, 6, 1, 7, 3 },
    { 6, 1, 4, 1, 3, 3, 6, 1, 4, 6 },
    { 6, 3, 5, 7, 3, 8, 5, 4, 7, 8 },
    { 4, 1, 6, 7, 5, 2, 4, 6, 4, 5 },
    { 2, 1, 7, 6, 8, 4, 1, 7, 2, 1 },
    { 6, 8, 8, 2, 8, 8, 1, 1, 3, 4 },
    { 4, 8, 4, 6, 8, 4, 8, 5, 5, 4 },
    { 5, 2, 8, 3, 7, 5, 1, 5, 2, 6 }
  };

  flashing := SOME x:[0,9], y:[0,9] (energy[x, y] > 9);
  prev_game_step := 0, game_step;
  game_step := prev_game_step + (if flashing then 0 else 1);

  flashed[x, y] := false, flashing & (flashed[x, y] # energy[x, y] > 9);

  flash_contribution(x, y)
    := if x:[0,9] & y:[0,9] & ~flashed[x, y] & energy[x, y] > 9
       then 1 else 0;

  I(energy[x, y]) := input_grid[x, y];
  X(energy[x, y]) := if flashing
                     then (if flashed[x, y] then 0
                           else energy[x, y] + flash_contribution(x-1, y-1)
                                             + flash_contribution(x,   y-1)
                                             + flash_contribution(x+1, y-1)
                                             + flash_contribution(x+1, y)
                                             + flash_contribution(x+1, y+1)
                                             + flash_contribution(x,   y+1)
                                             + flash_contribution(x-1, y+1)
                                             + flash_contribution(x-1, y))
                     else (if flashed[x, y] then 1 else energy[x, y] + 1);

  prev_flash_count := 0, if flashing then prev_flash_count else flash_count;
  flash_count := prev_flash_count
               + SUM x:[0,9], y:[0,9]
                   (if flashed[x, y] # energy[x, y] > 9 then 1 else 0);
Outputs:
  flash_count;
  game_step;

Proof Obligations:
  game_step <= 100;
  ~ALL x:[0,9], y:[0,9] (flashed[x, y] # energy[x, y] > 9);
