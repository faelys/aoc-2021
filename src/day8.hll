/*
 * Copyright (c) 2021, Natacha Port√©
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * The puzzles today allow the full use of a solver-backed language like HLL:
 * I only need to write the desired properties of each permutation, and the
 * solver magically makes it happen. It's so easy it almost feel like
 * cheating (that feeling is tampered by how difficult it is to face simple
 * problems outside of HLL field (like string manipulation), and by a nasty
 * typo when generating `pattern`).
 *
 * I was a bit afraid that the 56k full expansions would make it very slow,
 * but the expansion was done in 5s and the proofs in 7s.
 *
 * The constraints ensure that the input permutations satisfy the puzzle
 * description; BCC strategy checks that such input permutations exist;
 * the first PO proves uniqueness (by proving that two sets of input
 * permutations are always equal), and the second PO is FALSE to generate
 * an explorable counter-example.
 *
 * After filling in the puzzle input in display, this file can used with:
 *   expand1 -hll day8.hll -lll day8.lll -dumpMap day8.map
 *   s3 -lll day8.lll -cex day8.cex -bcc stop 1 -bmc
 *
 * Then the answers can then be displayed using:
 *   cex_simulator -hll day8.hll -map day8.map -cex day8.cex -res day8.res -O
 * OR
 *   why -hll day8.hll -map day8.map -cex day8.cex
 *   $out 1
 *   $out 2
 */

Constants:
  /* Puzzle size for reference values */
  int N := 10;

  /* Puzzle size for user-specific values
  int N := 200;
  */

Inputs:
  int[0,6] permutations[N][7];
  int[0,6] perm_chk[N][7];

Declarations:
  bool display[N][14][7];
  bool pattern[10][7];

  int digit(int, int);
  int answer_1;
  int answer_2;


Definitions:
  pattern := {
    /*
     * Derived from piping each digit through day8-input.sed
     * abcefg cf acdeg acdfg bcdf abdfg abdefg acf abcdefg abcdfg
     * # 0    1    2     3    4     5     6     7     8      9
     */
    { true, true, true, false, true, true, true },
    { false, false, true, false, false, true, false },
    { true, false, true, true, true, false, true },
    { true, false, true, true, false, true, true },
    { false, true, true, true, false, true, false },
    { true, true, false, true, false, true, true },
    { true, true, false, true, true, true, true },
    { true, false, true, false, false, true, false },
    { true, true, true, true, true, true, true },
    { true, true, true, true, false, true, true }
  };
  display := {
    /* generated by filtering AoC input to `sed -f day8-input.sed` */
    {
      { false, true, false, false, true, false, false },
      { true, true, true, true, true, true, true },
      { false, true, true, true, true, true, true },
      { true, false, true, true, true, true, true },
      { false, true, true, false, true, false, true },
      { false, false, true, true, true, true, true },
      { true, true, false, true, true, true, true },
      { false, true, true, true, true, true, false },
      { true, true, true, true, false, true, false },
      { false, true, false, true, true, false, false },
      { true, true, true, true, true, true, true },
      { false, true, true, true, true, true, false },
      { false, true, true, true, true, true, true },
      { false, true, true, false, true, false, true }
    },
    {
      { true, true, false, true, true, true, true },
      { false, true, true, true, true, false, true },
      { false, true, true, false, false, false, true },
      { false, false, true, false, false, false, true },
      { true, true, true, true, true, true, true },
      { false, true, false, true, true, true, true },
      { true, true, true, true, false, true, true },
      { true, true, true, true, true, false, false },
      { false, true, true, true, true, true, true },
      { false, false, true, false, true, true, true },
      { false, true, true, true, true, true, true },
      { false, true, true, false, false, false, true },
      { true, true, true, true, true, true, true },
      { false, false, true, false, false, false, true }
    },
    {
      { true, true, false, true, true, true, true },
      { false, false, true, false, false, false, true },
      { true, true, true, true, true, false, false },
      { true, true, false, true, false, true, true },
      { true, true, true, true, false, true, true },
      { false, true, true, true, true, true, true },
      { true, true, true, true, false, false, true },
      { true, false, true, false, false, true, true },
      { false, true, true, false, false, false, true },
      { true, true, true, true, true, true, true },
      { false, false, true, false, false, false, true },
      { false, false, true, false, false, false, true },
      { true, true, true, true, false, true, true },
      { false, true, true, false, false, false, true }
    },
    {
      { false, true, true, true, true, true, true },
      { false, true, true, true, false, false, false },
      { true, true, true, true, true, true, false },
      { true, true, false, true, true, false, true },
      { true, true, true, false, false, true, false },
      { false, true, true, false, false, false, false },
      { true, false, true, true, true, true, false },
      { true, true, true, true, true, false, false },
      { true, false, true, true, true, true, true },
      { true, true, true, true, true, true, true },
      { true, true, true, true, true, true, false },
      { true, true, true, true, true, false, false },
      { true, false, true, true, true, true, true },
      { false, true, true, false, false, false, false }
    },
    {
      { true, true, true, true, true, true, true },
      { false, true, false, false, false, true, true },
      { false, false, false, false, false, true, true },
      { true, true, false, false, true, true, true },
      { true, true, false, true, true, true, false },
      { false, false, true, false, true, true, true },
      { true, true, true, false, true, false, true },
      { true, true, true, false, true, true, true },
      { true, true, true, true, true, false, true },
      { true, true, true, true, false, true, true },
      { false, false, true, false, true, true, true },
      { true, true, true, true, true, true, true },
      { false, true, false, false, false, true, true },
      { true, true, false, false, true, true, true }
    },
    {
      { true, true, false, false, true, true, true },
      { true, false, true, false, false, false, false },
      { true, true, true, false, true, true, true },
      { true, true, true, true, true, true, true },
      { true, false, true, true, true, true, true },
      { false, true, true, true, false, true, true },
      { true, true, true, false, true, false, false },
      { true, true, false, true, true, true, true },
      { true, true, true, false, false, true, true },
      { true, false, true, false, false, true, false },
      { true, true, true, true, true, true, true },
      { true, true, true, false, true, false, false },
      { true, false, true, false, false, false, false },
      { true, true, true, true, true, true, true }
    },
    {
      { false, true, true, true, false, true, true },
      { false, false, false, true, false, true, true },
      { true, true, true, true, true, true, true },
      { false, false, true, false, true, true, true },
      { true, true, false, true, true, true, true },
      { true, true, true, true, true, true, false },
      { false, true, true, true, true, true, false },
      { true, true, true, true, false, false, true },
      { false, true, true, true, true, true, true },
      { false, false, false, false, false, true, true },
      { false, false, true, false, true, true, true },
      { false, true, true, true, true, true, false },
      { false, false, true, false, true, true, true },
      { true, true, true, true, true, true, true }
    },
    {
      { false, true, true, true, true, true, true },
      { true, true, true, false, true, true, true },
      { false, true, true, false, true, true, true },
      { true, false, true, true, true, true, true },
      { true, true, true, true, false, false, true },
      { false, false, false, true, true, false, false },
      { false, true, false, true, true, true, false },
      { false, false, true, true, true, false, false },
      { true, true, true, true, true, true, true },
      { false, true, true, true, true, false, true },
      { false, false, false, true, true, false, false },
      { true, true, true, false, true, true, true },
      { true, true, true, true, false, false, true },
      { false, true, true, false, true, true, true }
    },
    {
      { true, true, false, true, true, true, true },
      { false, true, true, true, true, true, true },
      { false, false, true, true, true, false, true },
      { true, true, true, false, true, true, false },
      { false, true, true, false, false, false, true },
      { true, true, true, true, true, true, true },
      { false, false, true, false, false, false, true },
      { true, true, true, true, false, true, true },
      { false, true, false, true, true, true, true },
      { false, true, true, false, true, true, true },
      { true, true, true, true, true, true, true },
      { false, true, true, false, false, false, true },
      { false, false, true, false, false, false, true },
      { false, true, true, false, false, false, true }
    },
    {
      { true, true, true, false, false, true, true },
      { false, false, true, false, false, true, true },
      { true, true, true, true, true, true, true },
      { true, true, true, false, true, false, true },
      { false, false, false, false, false, true, true },
      { true, true, true, true, true, false, true },
      { true, false, false, false, true, true, true },
      { true, true, true, false, true, true, true },
      { true, true, true, true, false, true, false },
      { false, true, true, true, true, true, true },
      { true, false, false, false, true, true, true },
      { true, true, true, false, false, true, true },
      { false, false, false, false, false, true, true },
      { true, true, true, false, true, false, true }
    }
  };

  /* First Puzzle */

  digit(n, i) := SELECT p:[0,9] (ALL s:[0,6] (display[n][i][s] = pattern[p][permutations[n][s]]));
  answer_1 := SUM n:[0, N-1], i:[10,13] (if digit(n, i) = 1
                                          # digit(n, i) = 4
                                          # digit(n, i) = 7
                                          # digit(n, i) = 8
                                         then 1 else 0);

  /* Second Puzzle */

  answer_2 := SUM n:[0,N-1], i:[10,13] (digit(n,i) * 10^(13-i));

Outputs:
  answer_1;
  answer_2;

Constraints:
  /* Input permutations are indeed permutations */
  ALL n:[0, N-1], i:[0,5]
    (ALL j:[i+1, 6] (permutations[n][i] != permutations[n][j]));
  ALL n:[0, N-1], i:[0,5]
    (ALL j:[i+1, 6] (perm_chk[n][i] != perm_chk[n][j]));

  /* Input permutations make sense */
  ALL n:[0, N-1], i:[0,13]
    (SOME p:[0,9]
      (ALL s:[0,6] (display[n][i][s] = pattern[p][permutations[n][s]])));
  ALL n:[0, N-1], i:[0,13]
    (SOME p:[0,9]
      (ALL s:[0,6] (display[n][i][s] = pattern[p][perm_chk[n][s]])));

Proof Obligations:
  permutations = perm_chk;
  FALSE;
