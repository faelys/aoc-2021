/*
 * Copyright (c) 2021, Natacha Porté
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * While the first puzzle was very easy to bruteforce, the second turned
 * out to be a challange. I thought it was clever to just cut the space
 * along instruction boundaries, but dealing with the 800³ resulting regions
 * used way too much memory. I half-heartly tried to simply measure the volume
 * and correcting recursively, almost expecting that the builtin memoization
 * would also spill over into the swap, but it turned out to be very fast
 * and correct on the first try.
 *
 * The previous iterations are left in the source below, deactived by comments.
 *
 * After appending the input converted into HLL by the companion script,
 * the results can be directly seen using the why tool and querying the
 * variables answer_1c or answer_2.
 */

Constants:
  int min1 := -50;
  int max1 := 50;
  int size1 := max1 - min1 + 1;
  bool on := true;
  bool off := false;

Types:
  struct { action:bool,
           xmin:int, xmax:int,
           ymin:int, ymax:int,
           zmin:int, zmax:int } instruction;

Declarations:
  /* Inefficient implementation for the first puzzle
  bool voxel[size1, size1, size1, nof_instructions];
  int answer_1;
  */

  /* Memory-hungry implementat for the second puzzle
  int last_instruction(int, int, int);
  bool last_state(int, int, int);
  int answer_1b;
  int answer_2;
  bool extended_last_state(int, int, int);
  */

  int on_count(int, int, int, int, int, int, int);
  int off_count(int, int, int, int, int, int, int);

Definitions:
  /* First Puzzle

  voxel[x, y, z, t]
    := if (x+min1):[instr[t].xmin, instr[t].xmax]
        & (y+min1):[instr[t].ymin, instr[t].ymax]
        & (z+min1):[instr[t].zmin, instr[t].zmax]
       then instr[t].action
       else t > 0 & voxel[x, y, z, t-1];

  answer_1 := SUM x:[0, size1-1], y:[0, size1-1], z:[0, size1-1]
                (if voxel[x, y, z, nof_instructions-1] then 1 else 0);
  */

  /* Second Puzzle

  last_instruction(x, y, z)
    := $max i:[0, nof_instructions-1]
          (if x:[instr[i].xmin, instr[i].xmax]
            & y:[instr[i].ymin, instr[i].ymax]
            & z:[instr[i].zmin, instr[i].zmax]
           then i else -1);

  last_state(x, y, z)
   := last_instruction(x, y, z) >= 0
      & instr[last_instruction(x, y, z)].action;

  extended_last_state(x, y, z)
   :=    x:[x_list[0], x_list[nof_x-1]-1]
       & y:[y_list[0], y_list[nof_y-1]-1]
       & z:[z_list[0], z_list[nof_z-1]-1]
       & last_state(x_list[SELECT xi:[0, nof_x-2]
                             (x:[x_list[xi], x_list[xi+1]-1])],
                    y_list[SELECT yi:[0, nof_y-2]
                             (y:[y_list[yi], y_list[yi+1]-1])],
                    z_list[SELECT zi:[0, nof_z-2]
                             (z:[z_list[zi], z_list[zi+1]-1])]);

  answer_2 := SUM xi:[0,nof_x-2], yi:[0, nof_y-2], zi:[0, nof_z-2]
                (if last_state(x_list[xi], y_list[yi], z_list[zi])
                 then (x_list[xi+1] - x_list[xi])
                    * (y_list[yi+1] - y_list[yi])
                    * (z_list[zi+1] - z_list[zi])
                 else 0);

  answer_1b := SUM xi:[0,nof_x-2], yi:[0, nof_y-2], zi:[0, nof_z-2]
                 (if x_list[xi] <= max1 & x_list[xi+1] > min1
                   & y_list[yi] <= max1 & y_list[yi+1] > min1
                   & z_list[zi] <= max1 & z_list[zi+1] > min1
                   & last_state(x_list[xi], y_list[yi], z_list[zi])
                  then ($min(x_list[xi+1], max1+1) - $max(x_list[xi], min1))
                     * ($min(y_list[yi+1], max1+1) - $max(y_list[yi], min1))
                     * ($min(z_list[zi+1], max1+1) - $max(z_list[zi], min1))
                  else 0);
  */

  /* Leaner Solution for the Second Puzzle */

  off_count(xmin, xmax, ymin, ymax, zmin, zmax, t)
    := (xmax+1-xmin) * (ymax+1-ymin) * (zmax+1-zmin)
       - on_count(xmin, xmax, ymin, ymax, zmin, zmax, t);

  on_count(xmin, xmax, ymin, ymax, zmin, zmax, t)
    := if t < 0 then 0
       else on_count(xmin, xmax, ymin, ymax, zmin, zmax, t-1)
          + (if xmax < instr[t].xmin # xmin > instr[t].xmax
              # ymax < instr[t].ymin # ymin > instr[t].ymax
              # zmax < instr[t].zmin # zmin > instr[t].zmax
             then 0
             elif instr[t].action
             then off_count($max(xmin, instr[t].xmin),
                            $min(xmax, instr[t].xmax),
                            $max(ymin, instr[t].ymin),
                            $min(ymax, instr[t].ymax),
                            $max(zmin, instr[t].zmin),
                            $min(zmax, instr[t].zmax),
                            t-1)
             else -on_count($max(xmin, instr[t].xmin),
                            $min(xmax, instr[t].xmax),
                            $max(ymin, instr[t].ymin),
                            $min(ymax, instr[t].ymax),
                            $max(zmin, instr[t].zmin),
                            $min(zmax, instr[t].zmax),
                            t-1));

  answer_1c := on_count(-50, 50, -50, 50, -50, 50, nof_instructions-1);
  answer_2 := on_count(x_list[0], x_list[nof_x-1],
                       y_list[0], y_list[nof_y-1],
                       z_list[0], z_list[nof_z-1],
                       nof_instructions-1);


Proof Obligations:
/*
  /* Positive border is indeed not set */
  ALL xi:[0,nof_x-2], yi:[0, nof_y-2]
    (~last_state(x_list[xi], y_list[yi], z_list[nof_z-1]))
& ALL xi:[0,nof_x-2], zi:[0, nof_z-2]
    (~last_state(x_list[xi], y_list[nof_y-1], z_list[zi]))
& ALL yi:[0,nof_y-2], zi:[0, nof_z-2]
    (~last_state(x_list[nof_x-1], y_list[yi], z_list[zi]));

  /* Re-implementation is correct */
  ALL xi:[0,nof_x-2], yi:[0, nof_y-2], zi:[0, nof_y-2]
    (x_list[xi]:[min1, max1] & y_list[yi]:[min1, max1] & z_list[zi]:[min1, max1]
     -> last_state(x_list[xi], y_list[yi], z_list[zi])
        = voxel[x_list[xi] - min1,
                y_list[yi] - min1,
                z_list[zi] - min1,
                nof_instructions-1]);
  ALL x:[min1, max1], y:[min1, max1], z:[min1, max1]
    (voxel[x-min1, y-min1, z-min1, nof_instructions-1]
     = extended_last_state(x, y, z));
*/


/* Input data generated using day22-input.sh */
Constants:
  int nof_instructions := 22;
  int nof_x := 34;
  int nof_y := 36;
  int nof_z := 38;

Declarations:
  instruction instr[nof_instructions];
  int x_list[nof_x];
  int y_list[nof_y];
  int z_list[nof_z];

Definitions:
  instr := {
    { on, -20,26,-36,17,-47,7 },
    { on, -20,33,-21,23,-26,28 },
    { on, -22,28,-29,23,-38,16 },
    { on, -46,7,-6,46,-50,-1 },
    { on, -49,1,-3,46,-24,28 },
    { on, 2,47,-22,22,-23,27 },
    { on, -27,23,-28,26,-21,29 },
    { on, -39,5,-6,47,-3,44 },
    { on, -30,21,-8,43,-13,34 },
    { on, -22,26,-27,20,-29,19 },
    { off, -48,-32,26,41,-47,-37 },
    { on, -12,35,6,50,-50,-2 },
    { off, -48,-32,-32,-16,-15,-5 },
    { on, -18,26,-33,15,-7,46 },
    { off, -40,-22,-38,-28,23,41 },
    { on, -16,35,-41,10,-47,6 },
    { off, -32,-23,11,30,-14,3 },
    { on, -49,-5,-3,45,-29,18 },
    { off, 18,30,-20,-8,-3,13 },
    { on, -41,9,-7,43,-33,15 },
    { on, -54112,-39298,-85059,-49293,-27449,7877 },
    { on, 967,23432,45373,81175,27513,53682 }
  };
  x_list := {
    -54112,
    -39297,
    -49,
    -48,
    -46,
    -41,
    -40,
    -39,
    -32,
    -31,
    -30,
    -27,
    -22,
    -21,
    -20,
    -18,
    -16,
    -12,
    -4,
    2,
    6,
    8,
    10,
    18,
    22,
    24,
    27,
    29,
    31,
    34,
    36,
    48,
    967,
    23433
  };
  y_list := {
    -85059,
    -49292,
    -41,
    -38,
    -36,
    -33,
    -32,
    -29,
    -28,
    -27,
    -22,
    -21,
    -20,
    -15,
    -8,
    -7,
    -6,
    -3,
    6,
    11,
    16,
    18,
    21,
    23,
    24,
    26,
    27,
    31,
    42,
    44,
    46,
    47,
    48,
    51,
    45373,
    81176
  };
  z_list := {
    -27449,
    -50,
    -47,
    -38,
    -36,
    -33,
    -29,
    -26,
    -24,
    -23,
    -21,
    -15,
    -14,
    -13,
    -7,
    -4,
    -3,
    -1,
    0,
    4,
    7,
    8,
    14,
    16,
    17,
    19,
    20,
    23,
    28,
    29,
    30,
    35,
    42,
    45,
    47,
    7878,
    27513,
    53683
  };
